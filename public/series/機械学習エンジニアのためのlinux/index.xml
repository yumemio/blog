<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>機械学習エンジニアのためのLinux on yumem.io</title>
    <link>https://yumem.io/series/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AElinux/</link>
    <description>Recent content in 機械学習エンジニアのためのLinux on yumem.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Yuki Sasaki</copyright>
    <lastBuildDate>Sun, 14 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://yumem.io/series/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AElinux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cdコマンドの使い方、相対パスと絶対パスのちがい</title>
      <link>https://yumem.io/posts/linux-ml-4/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-4/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第4回です。
cd コマンド 前回の記事 で、作業ディレクトリやパスについて簡単な説明をした。 今回は、作業ディレクトリを変えるコマンドを紹介し、パスの概念について掘り下げていく。
作業ディレクトリを変更するには、cd コマンドを使う。 エクスプローラや Finder では、フォルダをダブルクリックしたり、パスバーにフォルダパスを指定したりして作業ディレクトリを変更できるが、cd コマンドはそれと同じ役割を担っている。
cd には移動先のディレクトリを指定する。基本的な使い方はこうだ。
cd &amp;lt;ディレクトリパス&amp;gt; &amp;lt;ディレクトリパス&amp;gt; は、ディレクトリ名やパスに置き換えて使う。 cd と &amp;lt;ディレクトリパス&amp;gt; の間に、半角スペースが空いていることに注意してほしい。
それでは cd の具体的な使い方を、実例を交えて見ていこう。
1階層下のディレクトリに移動する いま、ホームディレクトリを開いているとしよう。 ls を実行すると次のようになる。
$ ls snap テンプレート ドキュメント ピクチャ 公開 ダウンロード デスクトップ ビデオ ミュージック この状態で「ドキュメント」ディレクトリを開きたい場合は、次のコマンドを実行する。 これは、エクスプローラや Finder でフォルダを選択して開くのと同じことだ。
$ cd ドキュメント これで、作業ディレクトリが切り替わった。 pwd コマンドで確かめてみよう。
$ pwd /home/yumemio/ドキュメント エクスプローラや Finder と異なり、cd で作業ディレクトリを移動しただけではディレクトリの中身は表示されない。 ls コマンドを実行して、「ドキュメント」ディレクトリの中身を表示しよう。 もし「ドキュメント」にファイルがない場合は、GUI上で適当なファイルを作成してからコマンドを実行してみよう。
$ ls sonnet.txt cd -: 直前の作業ディレクトリに戻る 直前の作業ディレクトリ（この例では yumemio）に戻る場合は、&amp;quot;cd -&amp;quot; を使う。 この機能はエクスプローラや Finder の「戻る（←）」ボタンに近いが、戻るボタンと異なり cd - は直前のディレクトリ以外の履歴を保持しない。</description>
    </item>
    
    <item>
      <title>Hello Linux!: ターミナル、lsコマンド、pwdコマンド</title>
      <link>https://yumem.io/posts/linux-ml-3/</link>
      <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-3/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第3回です。
ターミナル コマンドラインを用いた Linux の操作に欠かせないのが、「ターミナル」だ。
ターミナルは、コマンドを入力してコンピュータを操作できるアプリケーション だ。 Windows や Mac OS の GUI からファイルを表示・編集したりインターネットにアクセスできるのと同様に、 ターミナルからもファイルやフォルダの管理、メールの送受信など、様々な作業ができる。
🌴コラム: ターミナルの語源 テキストベースでコンピュータを操作するソフトウェアが「ターミナル」と呼ばれているのには、歴史的な背景がある。
文字入力だけでコンピュータを操作するCLIは、少なくとも1960年代にさかのぼる。 これは、GUIを搭載したコンピュータが登場する20年以上前のことだ。 現代の私たちはそれぞれ PC やスマートフォンを所有できるが、初期のコンピュータは高価で大型だったので、個人が1台ずつ使うのではなく、大きなコンピュータを組織ごとに1台（あるいは数台）買ってみんなで共有する、という使い方が一般的だった。
このときに登場したのが、「ターミナル（端末）」とよばれる機械だ。 物理的な機械としてのターミナルは、次の写真のような形をしている。
（Author: Jason Scott, CC-BY, from Wikimedia Commons）
ターミナルはディスプレイとキーボードを備えたデバイスで、現代のパソコンと同じような見た目をしているが、計算やファイル処理の機能はない。 実際の計算や処理をしているのは大きいマシン（メインフレーム）のほうで、ターミナルはユーザがタイプした内容をメインフレームに送信したり、メインフレームの計算結果を画面に表示したりする、いわば入出力の役割だけを担う。 そのぶんターミナルは安いので、企業や大学では1台のメインフレームに多数のターミナルを接続して、複数のユーザが同時に作業できるようにしていた。
つまり、各ユーザがメインフレームにアクセスするための端末（ターミナル）として機能するので、「ターミナル」という名前がついたわけだ。
その後の技術発展によってコンピュータ自体が安くなり、1人1台のコンピュータが持てる時代になった。 このため、メインフレームにターミナルをいくつも接続する、という使い方はあまり見られなくなった。 しかし、CLIでコンピュータを操作する環境を「ターミナル」と呼ぶ習慣は残り続けた。
そういうわけで、CLI 環境を提供するアプリは今でも「ターミナル」と呼ばれている。
それでは早速 Linux マシンを起動して、ターミナルを開いてみよう。ここでは Ubuntu を例に説明する。 手元に Linux 環境がない場合は、前回の記事 を参照して、Ubuntu の仮想マシンを作ってほしい。
Ubuntu の場合、画面の左下にある アイコンをクリックして、アプリランチャーを開いて&amp;hellip;
「端末」と検索すると、ターミナルが出てくる。
「端末」アプリを起動すると、次のようにほとんど真っ黒な画面が表示されるはずだ（環境によっては白い背景に黒文字など、色合いが異なる場合もある）。
まずは、この画面から見ていこう。
プロンプト 開いた画面をよく見ると、左上になにか文字が表示されていると思う。 私の Ubuntu 環境では、このように表示される。
yumemio@vanilla:~$ 表示される文字は環境によって異なるが、ほとんどの場合、最後がドル記号（$）かシャープ（#）で終わっているはずだ。
この文字は、「ユーザが入力するのを待っている」という状態を表している。 ユーザの行動を促す（prompt）という意味で、この文字を「プロンプト」という。
プロンプトには、ユーザ名やLinuxマシンの名前などの情報がコンパクトに表示されている。 たとえば、例として挙げたプロンプトからは次のことがわかる:</description>
    </item>
    
    <item>
      <title>VirtualBox でUbuntu 仮想環境を構築する</title>
      <link>https://yumem.io/posts/linux-ml-2/</link>
      <pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-2/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第2回です。
Linux 環境を準備しよう このシリーズでは機械学習エンジニアに役立つ Linux の使い方を紹介していくが、読者のあなたには、ぜひ実際に Linux 上で作業しながらこのシリーズを読み進めていただきたい。
Linux を PC にインストールする場合、3通りの方法がある。
PC 上のデータを削除し、Linux をクリーンインストール PC 上のデータを残したまま、Linux を追加でインストール 仮想環境に Linux をインストール データを消去しても構わないような、使っていない PC が手元にある場合は 「クリーンインストール」をおすすめしたい。
2番目の「Linux を追加でインストールする」方法は、あまり推奨できない。 というのも、初心者にとってはディスクパーティションの操作が難しいため、誤操作によるデータの喪失リスクがあるからだ。 また、将来的に Linux を削除する場合もパーティション操作が必要になるなど、 いろいろと手間がかかる。
そこで、Linux マシンを持っていない読者には、仮想環境 を使って既存の OS を残したまま Linux を試してみることをおすすめする。
仮想環境とは、専用のソフトウェアを使って既存の OS とは別の OS を同時に動かす技術だ。
仮想環境を実現するソフトウェアは、商用・非商用も含めていろいろあるが、ここではフリーで利用可能な 「VirtualBox（バーチャルボックス）」を使って、 Linux ディストリビューションのひとつ「Ubuntu（ウブントゥ）」をインストールする手順を説明しよう。
VirtualBox を使って Ubuntu 仮想環境を構築する VirtualBox のインストール まず、仮想化ソフトウェア VirtualBox をインストールしよう。
VirtualBox の公式 Web サイト (https://www.virtualbox.org/) にアクセスする。 「Download」リンクをクリックして、ダウンロードページを開く。 「VirtualBox &amp;hellip; platform packages」の下にあるリンクから、PC の OS に対応するインストーラをダウンロードする。 インストーラを起動し、指示に沿ってインストールしていく。 📔 ノート</description>
    </item>
    
    <item>
      <title>機械学習エンジニアのためのLinux: はじめに</title>
      <link>https://yumem.io/posts/linux-ml-1/</link>
      <pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-1/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第1回です。
はじめに 機械学習エンジニアとして働くなかで、私は Linux を頻繁に使っている。 学習・推論だけでなく、データセットの作成や結果の集計・分析など、いろいろなデータやファイルの処理にも Linux を活用してきた。
実際、Linux はこうした作業が得意な OS だ。 特にコマンドラインを使えば、大量のファイルを一度に編集したり、データどうしを紐づけたりするような複雑な作業もこなすことができる。
Linux で効率的なファイル処理をするには、いろいろなツールを使いこなす必要がある。 たとえば、ファイルの検索なら find や locate コマンド、画像の編集なら ImageMagick、といった具合だ。
だけど、これらのツールの機能や使い方をまとめて紹介してくれるチュートリアルは、あまり見かけない。
このシリーズの目的は、 Linux のコマンドラインを用いて、ファイルを効率的に処理する方法を学ぶことだ。 特に、Windows や Mac の操作には慣れているが、Linux をあまり使ったことがない人、 あるいは Linux の知識を復習したい人を対象に、様々なツールの実践的な使い方を紹介しようと思う。
なんで、コマンドラインなの？ Windows や Mac と比べた Linux の大きな特徴は、コマンドラインを多用する、というところだ。
PC を操作するときに、この図のような文字ばかりの画面を使っている場面を見たことがあると思う。
この黒い画面は コマンドライン や CLI (コマンドライン・インタフェース）とよばれ、 キーボードだけでコンピュータを操作できるという特徴がある。 ウィンドウやメニューをもつ GUI （グラフィカル・ユーザ・インタフェース） に比べるととっつきにくいけど、慣れればとても効率的に作業できるようになる。
また、コマンドラインを使うことで、サーバにアクセスして操作することも簡単になる。 機械学習の現場では、高性能なサーバやクラウド上など、リモート（遠隔）での作業が必要になることが多い。 コマンドラインを使いこなせば、どこからでも簡単にサーバに接続して作業ができるようになる。
コマンドラインで、何ができるの？ 「コマンドライン操作は効率的だ」と言われても、GUI に慣れている人はこう思うかもしれない。
Windows/ Mac に比べてグラフィックスはしょぼいし、コマンドラインで大したことはできないんじゃない？
そんなことはない。Linux のコマンドラインは、GUI に負けない多彩なツールを備えている。 Linux コマンドラインでできることのうち、ほんの一部を紹介しよう。
ファイルの移動・コピー、検索 インターネット上からのファイルのダウンロード Web ブラウザ を使ったネットサーフィン メールの送受信や管理 高性能なテキストエディタを使ったテキスト編集、コーディング 画像、動画の編集 音楽の再生 ディスクパーティション操作などの 高度な管理タスク さらに、コマンドラインの大きなアドバンテージとして「ツールの組み合わせ」と「バッチ化」という2つの機能がある。 これは、次のように言い換えてもいい。</description>
    </item>
    
  </channel>
</rss>
