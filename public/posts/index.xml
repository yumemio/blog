<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>記事 on yumem.io</title>
    <link>https://yumem.io/posts/</link>
    <description>Recent content in 記事 on yumem.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Yuki Sasaki</copyright>
    <lastBuildDate>Wed, 16 Nov 2022 11:07:52 +0000</lastBuildDate><atom:link href="https://yumem.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[勉強会スライド] 30分×5分で学ぶ Docker</title>
      <link>https://yumem.io/posts/30x5-docker/</link>
      <pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/30x5-docker/</guid>
      <description>TL;DR 私の勤め先で、社内勉強会「30分×5日で学ぶ Docker」を開催したので、スライド資料を公開します。
記事の後半では、勉強会開催のきっかけや反省点を書いていきます。
※ 記事の内容は個人の見解であり、所属組織の公式な見解ではありません。
スライド スライドの概要 想定受講者は、Dockerの利用経験がない（or 少ない）Web デベロッパ 30分×5日で、docker pull から Docker Compose まで体験してもらう 目標は、既存のプロジェクトでの Docker の利用を開始/拡大してもらうこと おしながき Day 5 以外の各回にはハンズオン・コーナーを設けています。
Day 1: Hello Docker! Docker ってなによ？ Docker をインストールする Docker を使ってみよう（👐ハンズオン） Day 2: コンテナ コンテナとイメージ コンテナを覗いてみよう（👐ハンズオン） コンテナ管理コマンド（👐ハンズオン） Day 3: Dockerfile Dockerfile とは Dockerfile の文法（👐ハンズオン） Dockerfile を使ってイメージを作成・コンテナを実行する（👐ハンズオン） Day 4: Docker Compose Docker Compose の意義 docker-compose.yml の文法（👐ハンズオン） Docker Compose の使い方（👐ハンズオン） Day 5: Docker を使った開発フロー 全体のふりかえり コンテナ開発のベストプラクティス 参考文献 開催の契機 社内には開発系部門が2つ（Web系部門と、私が所属するAI/GIS部門）があり、 部門間の技術スタックがぜんぜん違う、という状況でした。 そこで「経験・知識をお互いに共有する場があれば、業務の効率化/改善につながるんじゃないかな」という 動機で発案したのが、この社内勉強会です。</description>
    </item>
    
    <item>
      <title>[Colab, Jupyter] シェルコマンドや %env の中で変数を使う</title>
      <link>https://yumem.io/posts/jupyter-variables/</link>
      <pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/jupyter-variables/</guid>
      <description>TL;DR Colab や Jupyter Notebook のシェルコマンド・%env マジックで、Python 変数と環境変数を正しく扱う方法を紹介します。
説明はいいから概要だけ知りたい、という多忙なエンジニア/データサイエンティストの皆さんは、次の表をご覧ください。
表: Colab / Jupyter におけるPython変数・環境変数のアクセス方法 Python の変数にアクセス 環境変数にアクセス シェルコマンド内で !echo {py_var}
!echo $py_var† !echo $$PATH %env コマンド内で %env key={py_var}
%env key=$py_var %env key=
{os.environ[&#39;PATH&#39;]} Python のセル内で py_var os.environ[&#39;PATH&#39;] † 個人的には非推奨。py_var が Python 変数として定義されていない場合、$py_var がシェルの変数と解釈されて、紛らわしいことになる。
再設定頻度が高い環境変数2強の PATH と PYTHONPATH （個人の感想です）は、次のように設定するとよいです。
PATH の設定 import os %env PATH=/path/to/my/bin:{os.environ[&amp;#39;PATH&amp;#39;]} PYTHONPATH の設定（%env PYTHONPATH は使わない） import sys sys.path.append(&amp;#39;/path/to/my/pylib&amp;#39;) この記事を Jupyter Notebook に変換したものを GitHub Gist で公開しています。 Colab 環境でコードを動かしてみたい場合にご活用ください。</description>
    </item>
    
    <item>
      <title>mkdir と rmdir でディレクトリを操作する</title>
      <link>https://yumem.io/posts/linux-ml-11/</link>
      <pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-11/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第11回です。
概要 前回の記事までで、 コマンドを組み合わせて複雑な処理ができるという Linux コマンドラインの特徴を紹介した。
今回からは、ファイルとディレクトリの操作を行うコマンドを紹介する。 この記事では、ディレクトリの操作に必要な mkdir と rmdir という2つのコマンドを紹介しよう。
mkdir: 空のディレクトリを作成する mkdir は、空のディレクトリを作成するコマンドだ。 Windows や Mac OS では、エクスプローラや Finder を使って空のフォルダを作ることができるが、Linux コマンドラインでは mkdir が同じ働きをする。
$ mkdir &amp;lt;作成するディレクトリのパス&amp;gt; 例えば、ホームディレクトリ直下に secret_images というディレクトリを作成したい場合は、次のようなコマンドを実行すればいい。
$ mkdir ~/secret_images $ ls ~ secret_images ダウンロード デスクトップ ビデオ ミュージック snap テンプレート ドキュメント ピクチャ 公開 複数のディレクトリパスを渡せば、一度に複数のディレクトリを作成することもできる。 secret_documents と secret_videos という2つのディレクトリを作成してみよう。
$ mkdir ~/secret_documents ~/secret_videos ちなみに、すでに存在するディレクトリを作成しようとすると、mkdir はエラーを返す。
$ mkdir ~/secret_images mkdir: ディレクトリ `/home/yumemio/secret_images&amp;#39; を作成できません: ファイルが存在します -p オプション: 親ディレクトリも作成する mkdir には -p オプションという便利なオプションがある。 これを使うと、次の2つのことが起こる。</description>
    </item>
    
    <item>
      <title>ImageMagick ＋ xargs で大量の画像をリサイズする</title>
      <link>https://yumem.io/posts/linux-ml-10/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-10/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第10回です。
概要 前回の記事で xargs コマンドについて、第8回の記事で ImageMagick の convert コマンドについて説明した。
今回は、これら2つのコマンドを組み合わせて、大量の画像をリサイズする方法を見ていこう。
例題 次のようなケースを考えてみよう（第8回の記事で取り上げた例題と同じものだ）。
❓ 課題
下記のようなディレクトリ構造をもつ画像データセットがあるとしよう。
dataset |-thumbnails/ |-train/ | |-00000000.JPG | |-00000001.JPG | |-00000002.JPG | | ... | `-00009999.JPG `-val/ |-00010000.JPG |-00010001.JPG |-00010002.JPG | ... `-00010999.JPG dataset/train と dataset/val ディレクトリの下にあるすべての画像ファイルを縮小して、dataset/thumbnailsディレクトリに保存したい。
縮小した画像は幅・高さとも 256px とし、次のように thumbnails/ の直下に保存したいとしよう。
dataset |-thumbnails/ | |-thumb_00000000.JPG | |-thumb_00000001.JPG | | ... | `-thumb_00010999.JPG どうすればいいだろうか？
ディレクトリを作成する まず、サムネイル画像の保存先となる thumbnails/ ディレクトリを作成しておこう。 ディレクトリを作成するには、mkdir というコマンドを使う。
$ cd /path/to/dataset $ mkdir thumbnails 1枚の画像を変換するケースを考える 続いて、本題である画像のサムネイル作成に移るのだが、 すべての画像を処理するパイプラインを構築する前に、まずは1枚の画像を変換するケースから始めよう。</description>
    </item>
    
    <item>
      <title>Linux コマンドラインのコンセプト: xargs</title>
      <link>https://yumem.io/posts/linux-ml-9/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-9/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第9回です。
前回の復習 前回の記事では、画像編集ツール ImageMagick の convert コマンドを紹介した。
この記事では、xargs というコマンドを紹介する。 このコマンドは、大量のファイルを操作する際に欠かせないコマンドだ。
xargs とは xargs とは「標準入力から受け取った内容を引数にして、別のコマンドを実行する」コマンドだ。
&amp;hellip;といってもイメージが湧きづらいと思うので、実例を見ながら説明しよう。
❓ 例題
find コマンドで数百枚の画像ファイルを検索し、それらの画像の情報を ImageMagick の identify コマンドで表示したい。 どうすればよいか。
まず、コマンドの説明から始めよう。 第5回の記事 で説明したように、find は検索条件に合致するファイルパスを出力する。
$ # find コマンドの実行例 $ # カレントディレクトリ (.) を再帰的に検索し、 $ # 末尾が &amp;#39;.JPG&amp;#39; のファイルパスを出力する $ find . -name &amp;#39;*.JPG&amp;#39; ./train/good/0001.JPG ./train/good/0002.JPG ./train/good/0003.JPG ./train/damaged/1001.JPG ./train/damaged/1002.JPG ./train/damaged/1003.JPG ... 一方 identify は、画像ファイルのパスを引数で指定すると、その画像の情報を表示するコマンドだ。
次のコマンド例のように、画像フォーマットやピクセル数、色空間などの情報を表示できる（オプションとして -verbose を指定すると、EXIF情報を含む詳細なデータを表示できる）。
$ # identify コマンドの実行例 $ # 画像フォーマット: JPEG $ # 画像サイズ: 3840x2160 $ # 色空間: 8-bit sRGB $ identify .</description>
    </item>
    
    <item>
      <title>Linux コマンドラインのコンセプト: ImageMagick</title>
      <link>https://yumem.io/posts/linux-ml-8/</link>
      <pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-8/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第8回です。
前回の復習 前回の記事までで、 find、tr、cut コマンドを組み合わせたパイプ処理を紹介した。
今回からは、パイプ機能を使った別の例として、find コマンドと画像編集ツール ImageMagick を使って大量の画像を効率的にリサイズする方法を見ていこう。
この記事では ImageMagick の使い方を紹介し、次回の記事では find と ImageMagick を組み合わせる方法を考えていく。
ImageMagick とは？ ImageMagick は、コマンドライン上で利用できる画像編集ツール群だ。 画像のフォーマット変換、リサイズ・ぼかし・回転などの編集、さらにはCGの作成など幅広い機能をもち、Linux コマンドライン上で画像を加工するときに広く用いられている。
ImageMagick は単体のツールではなく、convert（画像加工コマンド）、mogrify（画像の上書き編集コマンド）、identify（画像の情報を表示するコマンド）など、いくつかのコマンドをまとめたパッケージとして提供されている。
その中核をなすのが convert（バージョン7では magick）コマンドだ。 このコマンドひとつで、画像の加工や作成などのさまざまな機能を使うことができる。
📔 ノート
ImageMagick は、バージョンによってコマンドの名前や機能が一部異なる。 最新のバージョン7では convert コマンドの名前が magick になる、という大きな変化があった。 このため、最新の ImageMagick 公式ドキュメントでは magick コマンドの利用が前提となっている。
それに対して、Ubuntu など一部の Linux ディストリビューションでは、少し古い バージョン6 の ImageMagick がプリインストールされている場合がある。
本稿では、ImageMagick v6 の convert コマンドを前提としているが、ImageMagick v7 がインストールされた環境では convert を magick に適宜読み替えてほしい。
$ # ImageMagick v6 のコマンド例 $ convert input.</description>
    </item>
    
    <item>
      <title>Linux コマンドラインのコンセプト: cut コマンド</title>
      <link>https://yumem.io/posts/linux-ml-7/</link>
      <pubDate>Sun, 04 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-7/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第7回です。
前回の復習 前回の記事では、「データセット内のファイル一覧をCSV形式で出力する」という問題を考えた。 その際に、パイプ機能と tr コマンドを利用して、ファイルパスをCSVフォーマットに変換した。 しかし、出力の先頭に余分な文字（.,）が付いてしまっていた。
今回は、この余分な文字を取り除くのに役立つ cut コマンドを学び、問題の解答となるコマンドを作成しよう。
cut コマンド cut コマンドは、入力したテキストのそれぞれの行から一部だけを抽出するコマンドだ。
抽出のしかたには、「文字の位置を指定する方法」と「列を指定する方法」の2通りがある。
文字の位置を指定して抽出する cut に -c オプションを渡すと、文字の位置を指定して抽出することができる。
find . -type f というコマンドの出力を cut でフィルタする場合を例として考えよう。 find コマンド単体の出力は次のとおりだ。
$ find . -type f ./README.txt ./train/speaker_a/speech_0001.wav ./train/speaker_b/speech_0002.wav ./validation/speaker_a/speech_1001.wav ./validation/speaker_b/speech_1002.wav cut -c 3 をパイプでつなげると、出力の各行から3文字目だけを取得できる。
$ find . -type f | cut -c 3 R t t v v ハイフン（-）を使うと、複数の文字を範囲指定することもできる。 例えば、次のように指定できる。
-c -5 &amp;mdash;&amp;mdash; 各行の最初の文字から5文字目までを取得する -c 7-9 &amp;mdash;&amp;mdash; 各行の7〜9文字目を取得する $ find .</description>
    </item>
    
    <item>
      <title>Linux コマンドラインのコンセプト: パイプ機能と tr コマンド</title>
      <link>https://yumem.io/posts/linux-ml-6/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-6/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第6回です。
パイプ 前回の記事では、出力リダイレクトについて学んだ。 command &amp;gt; /path/to/file のように記述することで、コマンドの実行結果をファイルとして保存することができる、という機能だ。
この記事では パイプ という機能と、パイプ機能でよく使う tr というコマンドを紹介する。
パイプは、あるコマンドの出力を、別のコマンドの入力とする機能だ。 この機能を使うと、複数のコマンドを組み合わせて、いろいろな処理を組み立てられるようになる。
Linux のパイプラインの機能は、格闘ゲームのコンボ技と比較するとわかりやすいかもしれない。 格闘ゲームでは、プレイヤーが特定のボタンの組み合わせを素早く押すと、コンボとよばれる連鎖攻撃を放つことができる。 パンチやキックなどを連続させることで、単発の攻撃よりも強力なダメージを相手に与えられる。
同様に、コマンドラインのパイプ機能を使うと、1つのコマンドの出力が次のコマンドに入力され、次のコマンドの「引き金」となる。 この「コンボ」を成功させることで、単体のコマンドでは得られないさまざまな処理が実現できる。
📔 ノート
画面に表示されるコマンドの出力を、専門的には「標準出力（STDOUT）」という。 また、コマンドへの入力のことを「標準入力（STDIN）」という。
標準入出力については、別の記事で詳しく紹介したいと思う。
例題: ファイル一覧を CSV 形式で出力する パイプ機能を利用する例として、次のようなケースを考えてみよう。
❓ 課題
次に示すディレクトリ構造をもつデータセットがあるとしよう。 （前回の記事で、例題として取り上げたデータセットと同じ構造だ）
/home/me/dataset |-train/ | |-speaker_a/ | | |-speech_0001.wav | | |-speech_0002.wav | | ... | |-speaker_b/ | |-speaker_c/ | | ... | `-speaker_z/ `-validation/ |-speaker_a/ | |-speech_1001.wav | |-speech_1002.wav | ... |-speaker_b/ |-speaker_c/ | ... `-speaker_z/ このデータセットの構成を、他のプログラム（Excel など）を使って分析したい。</description>
    </item>
    
    <item>
      <title>Linux コマンドラインのコンセプト: テキスト指向性、出力リダイレクト、引数</title>
      <link>https://yumem.io/posts/linux-ml-5/</link>
      <pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-5/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第5回です。
Linux コマンドラインのコンセプト 前回の記事の最後に、次のような（想像上の）読者の声を紹介した。
フォルダを開いたり移動したりするだけなら、エクスプローラ/Finderでもできるじゃん。 これのどこがすごいんだよ！
確かに、エクスプローラや Finder などの GUI ツールでも、ls や cd と同じような作業はできる。 だが、CLI の真の魅力は、そうした単純な操作を組み合わせて、複雑な作業を効率的に実行できる、というところにある。
これ以降の数章では、Linux コマンドラインの強力な機能を支える特徴を、実例をみながら解説していこうと思う。 いろいろなコマンドが登場するが、コマンド自体の説明は最小限にしている。 各コマンドの詳しい使い方は、別の記事で再度取り上げる予定なので、今回はざっと読み流しながら「こういう使い方もできるんだな」という感覚をつかんでもらいたい。
CLI は「テキスト指向」環境 CLI のさまざまな機能や特徴の基礎となるのが、テキスト指向性だ。
GUI 環境と CLI 環境の大きな違いは、GUI ではマウス操作や視覚的な画面出力ができるのに対して、CLI では基本的に文字（テキスト）しか入力・表示できない、という点にある。 このため、コマンドラインで利用できるコマンドの多くは、実行結果をテキスト形式で出力する。
これは「コマンドラインでは画像や映像などのデータを扱えない」という意味ではない。 画像や映像を扱えるCLIツールはあるが、そうしたツールの操作もテキストで行う、ということだ。
例えば ls の出力は、画面上にテキストとして表示される。
$ ls snap テンプレート ドキュメント ピクチャ 公開 ダウンロード デスクトップ ビデオ ミュージック pwd コマンドについても同じだ。
$ pwd /home/yumemio 出力リダイレクト: コマンドの実行結果をファイルに保存 このように出力がテキストであるメリットの1つとして、コマンドの結果を簡単に保存できる、という点が挙げられる。
コマンドの実行結果は画面上に出力されるが、出力リダイレクトという機能を使えば、出力先としてファイルを指定することもできる。
出力リダイレクトの使い方は、コマンドの最後に &amp;gt; と出力先ファイルパスを指定する、というものだ。
コマンド &amp;gt; 出力先のファイルパス 例えば、次のようなシチュエーションを考えてみよう。
❓ 課題
データセットに含まれるファイル一覧を、テキスト形式で取得したい。
あるディレクトリの直下にあるすべてのファイル名を、テキストとして書き出すには、どうすればいいか。
この場合は、ls コマンドと出力リダイレクトを使えばよい。 次のようなコマンドを実行してみよう。</description>
    </item>
    
    <item>
      <title>cdコマンドの使い方、相対パスと絶対パスのちがい</title>
      <link>https://yumem.io/posts/linux-ml-4/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-4/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第4回です。
cd コマンド 前回の記事 で、作業ディレクトリやパスについて簡単な説明をした。 今回は、作業ディレクトリを変えるコマンドを紹介し、パスの概念について掘り下げていく。
作業ディレクトリを変更するには、cd コマンドを使う。 エクスプローラや Finder では、フォルダをダブルクリックしたり、パスバーにフォルダパスを指定したりして作業ディレクトリを変更できるが、cd コマンドはそれと同じ役割を担っている。
cd には移動先のディレクトリを指定する。基本的な使い方はこうだ。
cd &amp;lt;ディレクトリパス&amp;gt; &amp;lt;ディレクトリパス&amp;gt; は、ディレクトリ名やパスに置き換えて使う。 cd と &amp;lt;ディレクトリパス&amp;gt; の間に、半角スペースが空いていることに注意してほしい。
それでは cd の具体的な使い方を、実例を交えて見ていこう。
1階層下のディレクトリに移動する いま、ホームディレクトリを開いているとしよう。 ls を実行すると次のようになる。
$ ls snap テンプレート ドキュメント ピクチャ 公開 ダウンロード デスクトップ ビデオ ミュージック この状態で「ドキュメント」ディレクトリを開きたい場合は、次のコマンドを実行する。 これは、エクスプローラや Finder でフォルダを選択して開くのと同じことだ。
$ cd ドキュメント これで、作業ディレクトリが切り替わった。 pwd コマンドで確かめてみよう。
$ pwd /home/yumemio/ドキュメント エクスプローラや Finder と異なり、cd で作業ディレクトリを移動しただけではディレクトリの中身は表示されない。 ls コマンドを実行して、「ドキュメント」ディレクトリの中身を表示しよう。 もし「ドキュメント」にファイルがない場合は、GUI上で適当なファイルを作成してからコマンドを実行してみよう。
$ ls sonnet.txt cd -: 直前の作業ディレクトリに戻る 直前の作業ディレクトリ（この例では yumemio）に戻る場合は、&amp;quot;cd -&amp;quot; を使う。 この機能はエクスプローラや Finder の「戻る（←）」ボタンに近いが、戻るボタンと異なり cd - は直前のディレクトリ以外の履歴を保持しない。</description>
    </item>
    
    <item>
      <title>Hello Linux!: ターミナル、lsコマンド、pwdコマンド</title>
      <link>https://yumem.io/posts/linux-ml-3/</link>
      <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-3/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第3回です。
ターミナル コマンドラインを用いた Linux の操作に欠かせないのが、「ターミナル」だ。
ターミナルは、コマンドを入力してコンピュータを操作できるアプリケーション だ。 Windows や Mac OS の GUI からファイルを表示・編集したりインターネットにアクセスできるのと同様に、 ターミナルからもファイルやフォルダの管理、メールの送受信など、様々な作業ができる。
🌴コラム: ターミナルの語源 テキストベースでコンピュータを操作するソフトウェアが「ターミナル」と呼ばれているのには、歴史的な背景がある。
文字入力だけでコンピュータを操作するCLIは、少なくとも1960年代にさかのぼる。 これは、GUIを搭載したコンピュータが登場する20年以上前のことだ。 現代の私たちはそれぞれ PC やスマートフォンを所有できるが、初期のコンピュータは高価で大型だったので、個人が1台ずつ使うのではなく、大きなコンピュータを組織ごとに1台（あるいは数台）買ってみんなで共有する、という使い方が一般的だった。
このときに登場したのが、「ターミナル（端末）」とよばれる機械だ。 物理的な機械としてのターミナルは、次の写真のような形をしている。
（Author: Jason Scott, CC-BY, from Wikimedia Commons）
ターミナルはディスプレイとキーボードを備えたデバイスで、現代のパソコンと同じような見た目をしているが、計算やファイル処理の機能はない。 実際の計算や処理をしているのは大きいマシン（メインフレーム）のほうで、ターミナルはユーザがタイプした内容をメインフレームに送信したり、メインフレームの計算結果を画面に表示したりする、いわば入出力の役割だけを担う。 そのぶんターミナルは安いので、企業や大学では1台のメインフレームに多数のターミナルを接続して、複数のユーザが同時に作業できるようにしていた。
つまり、各ユーザがメインフレームにアクセスするための端末（ターミナル）として機能するので、「ターミナル」という名前がついたわけだ。
その後の技術発展によってコンピュータ自体が安くなり、1人1台のコンピュータが持てる時代になった。 このため、メインフレームにターミナルをいくつも接続する、という使い方はあまり見られなくなった。 しかし、CLIでコンピュータを操作する環境を「ターミナル」と呼ぶ習慣は残り続けた。
そういうわけで、CLI 環境を提供するアプリは今でも「ターミナル」と呼ばれている。
それでは早速 Linux マシンを起動して、ターミナルを開いてみよう。ここでは Ubuntu を例に説明する。 手元に Linux 環境がない場合は、前回の記事 を参照して、Ubuntu の仮想マシンを作ってほしい。
Ubuntu の場合、画面の左下にある アイコンをクリックして、アプリランチャーを開いて&amp;hellip;
「端末」と検索すると、ターミナルが出てくる。
「端末」アプリを起動すると、次のようにほとんど真っ黒な画面が表示されるはずだ（環境によっては白い背景に黒文字など、色合いが異なる場合もある）。
まずは、この画面から見ていこう。
プロンプト 開いた画面をよく見ると、左上になにか文字が表示されていると思う。 私の Ubuntu 環境では、このように表示される。
yumemio@vanilla:~$ 表示される文字は環境によって異なるが、ほとんどの場合、最後がドル記号（$）かシャープ（#）で終わっているはずだ。
この文字は、「ユーザが入力するのを待っている」という状態を表している。 ユーザの行動を促す（prompt）という意味で、この文字を「プロンプト」という。
プロンプトには、ユーザ名やLinuxマシンの名前などの情報がコンパクトに表示されている。 たとえば、例として挙げたプロンプトからは次のことがわかる:</description>
    </item>
    
    <item>
      <title>VirtualBox でUbuntu 仮想環境を構築する</title>
      <link>https://yumem.io/posts/linux-ml-2/</link>
      <pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-2/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第2回です。
Linux 環境を準備しよう このシリーズでは機械学習エンジニアに役立つ Linux の使い方を紹介していくが、読者のあなたには、ぜひ実際に Linux 上で作業しながらこのシリーズを読み進めていただきたい。
Linux を PC にインストールする場合、3通りの方法がある。
PC 上のデータを削除し、Linux をクリーンインストール PC 上のデータを残したまま、Linux を追加でインストール 仮想環境に Linux をインストール データを消去しても構わないような、使っていない PC が手元にある場合は 「クリーンインストール」をおすすめしたい。
2番目の「Linux を追加でインストールする」方法は、あまり推奨できない。 というのも、初心者にとってはディスクパーティションの操作が難しいため、誤操作によるデータの喪失リスクがあるからだ。 また、将来的に Linux を削除する場合もパーティション操作が必要になるなど、 いろいろと手間がかかる。
そこで、Linux マシンを持っていない読者には、仮想環境 を使って既存の OS を残したまま Linux を試してみることをおすすめする。
仮想環境とは、専用のソフトウェアを使って既存の OS とは別の OS を同時に動かす技術だ。
仮想環境を実現するソフトウェアは、商用・非商用も含めていろいろあるが、ここではフリーで利用可能な 「VirtualBox（バーチャルボックス）」を使って、 Linux ディストリビューションのひとつ「Ubuntu（ウブントゥ）」をインストールする手順を説明しよう。
VirtualBox を使って Ubuntu 仮想環境を構築する VirtualBox のインストール まず、仮想化ソフトウェア VirtualBox をインストールしよう。
VirtualBox の公式 Web サイト (https://www.virtualbox.org/) にアクセスする。 「Download」リンクをクリックして、ダウンロードページを開く。 「VirtualBox &amp;hellip; platform packages」の下にあるリンクから、PC の OS に対応するインストーラをダウンロードする。 インストーラを起動し、指示に沿ってインストールしていく。 📔 ノート</description>
    </item>
    
    <item>
      <title>機械学習エンジニアのためのLinux: はじめに</title>
      <link>https://yumem.io/posts/linux-ml-1/</link>
      <pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yumem.io/posts/linux-ml-1/</guid>
      <description>この記事は、シリーズ 機械学習エンジニアのためのLinux の第1回です。
はじめに 機械学習エンジニアとして働くなかで、私は Linux を頻繁に使っている。 学習・推論だけでなく、データセットの作成や結果の集計・分析など、いろいろなデータやファイルの処理にも Linux を活用してきた。
実際、Linux はこうした作業が得意な OS だ。 特にコマンドラインを使えば、大量のファイルを一度に編集したり、データどうしを紐づけたりするような複雑な作業もこなすことができる。
Linux で効率的なファイル処理をするには、いろいろなツールを使いこなす必要がある。 たとえば、ファイルの検索なら find や locate コマンド、画像の編集なら ImageMagick、といった具合だ。
だけど、これらのツールの機能や使い方をまとめて紹介してくれるチュートリアルは、あまり見かけない。
このシリーズの目的は、 Linux のコマンドラインを用いて、ファイルを効率的に処理する方法を学ぶことだ。 特に、Windows や Mac の操作には慣れているが、Linux をあまり使ったことがない人、 あるいは Linux の知識を復習したい人を対象に、様々なツールの実践的な使い方を紹介しようと思う。
なんで、コマンドラインなの？ Windows や Mac と比べた Linux の大きな特徴は、コマンドラインを多用する、というところだ。
PC を操作するときに、この図のような文字ばかりの画面を使っている場面を見たことがあると思う。
この黒い画面は コマンドライン や CLI (コマンドライン・インタフェース）とよばれ、 キーボードだけでコンピュータを操作できるという特徴がある。 ウィンドウやメニューをもつ GUI （グラフィカル・ユーザ・インタフェース） に比べるととっつきにくいけど、慣れればとても効率的に作業できるようになる。
また、コマンドラインを使うことで、サーバにアクセスして操作することも簡単になる。 機械学習の現場では、高性能なサーバやクラウド上など、リモート（遠隔）での作業が必要になることが多い。 コマンドラインを使いこなせば、どこからでも簡単にサーバに接続して作業ができるようになる。
コマンドラインで、何ができるの？ 「コマンドライン操作は効率的だ」と言われても、GUI に慣れている人はこう思うかもしれない。
Windows/ Mac に比べてグラフィックスはしょぼいし、コマンドラインで大したことはできないんじゃない？
そんなことはない。Linux のコマンドラインは、GUI に負けない多彩なツールを備えている。 Linux コマンドラインでできることのうち、ほんの一部を紹介しよう。
ファイルの移動・コピー、検索 インターネット上からのファイルのダウンロード Web ブラウザ を使ったネットサーフィン メールの送受信や管理 高性能なテキストエディタを使ったテキスト編集、コーディング 画像、動画の編集 音楽の再生 ディスクパーティション操作などの 高度な管理タスク さらに、コマンドラインの大きなアドバンテージとして「ツールの組み合わせ」と「バッチ化」という2つの機能がある。 これは、次のように言い換えてもいい。</description>
    </item>
    
  </channel>
</rss>
